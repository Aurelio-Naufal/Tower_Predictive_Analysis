{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6b2b00d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import TimeSeriesSplit\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from xgboost import XGBRegressor\n",
    "from catboost import CatBoostRegressor\n",
    "import lightgbm as lgb\n",
    "from datetime import timedelta\n",
    "\n",
    "st.title(\"Monthly Trouble Ticket Dashboard with Forecasting\")\n",
    "\n",
    "uploaded_files = st.file_uploader(\"Upload Excel Files\", type=['xls', 'xlsx'], accept_multiple_files=True)\n",
    "\n",
    "if uploaded_files:\n",
    "    try:\n",
    "        # Combine multiple Excel files\n",
    "        df_list = [pd.read_excel(file) for file in uploaded_files]\n",
    "        df = pd.concat(df_list, ignore_index=True)\n",
    "\n",
    "        # Clean column headers\n",
    "        df.columns = df.columns.str.replace(' ', '', regex=False)\n",
    "\n",
    "        # Select date column\n",
    "        date_column = st.selectbox(\"Select the date column:\", df.columns)\n",
    "        df[date_column] = pd.to_datetime(df[date_column], errors='coerce')\n",
    "        df = df.dropna(subset=[date_column])\n",
    "\n",
    "        # Optional CaseTypeName filter\n",
    "        case_type_col = st.selectbox(\"Select the CaseTypeName column (or skip):\", options=['None'] + list(df.columns))\n",
    "        if case_type_col != 'None':\n",
    "            selected_types = st.multiselect(\n",
    "                f\"Filter by values in {case_type_col}:\",\n",
    "                options=df[case_type_col].dropna().unique(),\n",
    "                default=df[case_type_col].dropna().unique()\n",
    "            )\n",
    "            df = df[df[case_type_col].isin(selected_types)]\n",
    "\n",
    "        # Add year and month for visualization\n",
    "        df['Year'] = df[date_column].dt.year\n",
    "        df['Month'] = df[date_column].dt.month_name().str[:3]\n",
    "\n",
    "        # Group and plot monthly cases\n",
    "        monthly = df.groupby(['Year', 'Month']).size().unstack(fill_value=0)\n",
    "        month_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n",
    "                       'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n",
    "        present_months = [m for m in month_order if m in monthly.columns]\n",
    "        monthly = monthly[present_months]\n",
    "\n",
    "        st.subheader(\"Monthly Trouble Tickets per Year\")\n",
    "        fig, ax = plt.subplots(figsize=(10, 5))\n",
    "        monthly.T.plot(kind='line', marker='o', ax=ax)\n",
    "        ax.set_title('Monthly Case Distribution per Year')\n",
    "        ax.set_xlabel('Month')\n",
    "        ax.set_ylabel('Number of Cases')\n",
    "        ax.set_xticks(range(len(present_months)))\n",
    "        ax.set_xticklabels(present_months)\n",
    "        ax.grid(True)\n",
    "        st.pyplot(fig)\n",
    "\n",
    "        # ---- Forecasting Section ----\n",
    "        st.subheader(\"Forecasting Next 3 Months\")\n",
    "\n",
    "        # Create daily case counts\n",
    "        df_daily = df.groupby(df[date_column].dt.date).size().reset_index(name='Count')\n",
    "        df_daily['date'] = pd.to_datetime(df_daily[date_column])\n",
    "        df_daily = df_daily[['date', 'Count']].sort_values('date')\n",
    "\n",
    "        # Create lag features\n",
    "        for lag in range(1, 8):\n",
    "            df_daily[f'lag_{lag}'] = df_daily['Count'].shift(lag)\n",
    "        df_daily.dropna(inplace=True)\n",
    "\n",
    "        # Train on all available data\n",
    "        X = df_daily.drop(['date', 'Count'], axis=1)\n",
    "        y = df_daily['Count']\n",
    "\n",
    "        models = {\n",
    "            'XGBoost': XGBRegressor(random_state=42),\n",
    "            'CatBoost': CatBoostRegressor(verbose=0, random_state=42),\n",
    "            'LightGBM': lgb.LGBMRegressor(random_state=42),\n",
    "        }\n",
    "\n",
    "        def calculate_mape(y_true, y_pred):\n",
    "            epsilon = 1e-10\n",
    "            return np.mean(np.abs((y_true - y_pred) / (y_true + epsilon))) * 100\n",
    "\n",
    "        best_model = None\n",
    "        best_model_name = ''\n",
    "        best_mape = float('inf')\n",
    "\n",
    "        for name, model in models.items():\n",
    "            model.fit(X, y)\n",
    "            y_pred = model.predict(X)\n",
    "            mape = calculate_mape(y, y_pred)\n",
    "            if mape < best_mape:\n",
    "                best_mape = mape\n",
    "                best_model = model\n",
    "                best_model_name = name\n",
    "\n",
    "        st.success(f\"Best model: {best_model_name} with MAPE: {best_mape:.2f}%\")\n",
    "\n",
    "        # Forecast next 3 months (approx. 90 days)\n",
    "        last_row = df_daily.iloc[-1]\n",
    "        future_dates = [last_row['date'] + timedelta(days=i) for i in range(1, 91)]\n",
    "        forecast_data = []\n",
    "        recent_lags = list(last_row[[f'lag_{i}' for i in range(1, 8)]].values)\n",
    "\n",
    "        for _ in range(90):\n",
    "            X_input = np.array(recent_lags).reshape(1, -1)\n",
    "            pred = best_model.predict(X_input)[0]\n",
    "            forecast_data.append(pred)\n",
    "            recent_lags = [pred] + recent_lags[:-1]\n",
    "\n",
    "        forecast_df = pd.DataFrame({\n",
    "            'date': future_dates,\n",
    "            'forecast': forecast_data\n",
    "        })\n",
    "\n",
    "        # Combine with historical data\n",
    "        full_plot = pd.concat([\n",
    "            df_daily[['date', 'Count']].rename(columns={'Count': 'value'}).assign(type='actual'),\n",
    "            forecast_df.rename(columns={'forecast': 'value'}).assign(type='forecast')\n",
    "        ])\n",
    "\n",
    "        # Plot forecast\n",
    "        fig2, ax2 = plt.subplots(figsize=(12, 5))\n",
    "        for label, grp in full_plot.groupby('type'):\n",
    "            ax2.plot(grp['date'], grp['value'], label=label)\n",
    "        ax2.set_title(\"Daily Case Forecast (Next 3 Months)\")\n",
    "        ax2.set_ylabel(\"Cases\")\n",
    "        ax2.legend()\n",
    "        ax2.grid(True)\n",
    "        st.pyplot(fig2)\n",
    "\n",
    "    except Exception as e:\n",
    "        st.error(f\"Error: {e}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
